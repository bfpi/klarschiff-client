<% require_asset "OpenLayers#{ '.min' unless Rails.env.development? }" %>

KS.projection = ->
  if typeof proj4 is 'function'
    proj4.defs 'EPSG:25833', '+proj=utm +zone=33 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs'
    proj4.defs 'urn:ogc:def:crs:EPSG::25833', proj4.defs('EPSG:25833')
    projection_25833 = ol.proj.get 'EPSG:25833'
    projection_25833.setExtent <%= Settings::Map.mv_bbox_25833 %>
    return projection_25833
  else
    console.log 'Proj4J ist nicht geladen!'

KS.maxZoom = <%= Settings::Map.zoom[:max] %>
KS.projectionWGS84 = ol.proj.get 'EPSG:4326'
KS.zoomEvent = false
KS.requests_path = "<%= Settings::Route.requests_path %>/"
KS.jobs_path = "<%= Settings::Route.jobs_path %>/"
KS.areas_path = "<%= Settings::Route.areas_path %>/?with_districts=true"
KS.login_required = <%= Settings::Client.login_required %>
KS.draw_observation = null

KS.GeolocationControl = () ->
  span = document.createElement('span')
  span.className = 'glyphicon glyphicon-screenshot'
  btn = document.createElement('button')
  btn.appendChild(span)
  setGeolocation = () ->
    KS.geolocation.center(KS.olMap)
  btn.addEventListener('click', setGeolocation, false)
  elem = document.createElement('div')
  elem.className = 'geolocation ol-unselectable ol-control'
  elem.appendChild(btn)

  ol.control.Control.call this,
    element: elem
    target: {}.target

ol.inherits(KS.GeolocationControl, ol.control.Control)

class KS.Map
  constructor: (@projection = KS.projection()) ->
    @olMap = new ol.Map
      target: 'ol-map'
      controls: ol.control.defaults().extend([new KS.GeolocationControl])
      view: new ol.View
        projection: @projection
        center: <%= Settings::Map.center %>
        zoom: <%= Settings::Map.zoom[:initial] %>
        maxZoom: KS.maxZoom
        minZoom: <%= Settings::Map.zoom[:min] %>
    KS.layers = new KS.Layers(@olMap)
    addControls(@olMap)
    KS.geolocation = new KS.Geolocation(@olMap)
    KS.newFeatureOverlay = new ol.FeatureOverlay(
      map: @olMap
    )
    return @olMap

  addControls = (map) ->
    map.addControl new ol.control.ScaleLine

    map.on 'click', (e) ->
      map.forEachFeatureAtPixel e.pixel, (feature, layer) ->
        if layer
          if layer.get('id') == 'observations'
            feature.set('selected', !feature.get('selected'))
            if feature.get('selected')
              feature.getStyle().getFill().setColor('rgba(255,0,255,0.5)')
              feature.getStyle().getText().getFill().setColor('#FF00FF')
            else
              feature.getStyle().getFill().setColor('rgba(255,135,0,0.5)')
              feature.getStyle().getText().getFill().setColor('#FF8700')
          else if !KS.layers.findById('observations').getVisible() &&
          !KS.layers.findById('draw_observation').getVisible() &&
          (layer.get('id') in ['features', 'jobs'])
            features = feature.get('features')
            url = KS.requests_path
            if features.length == 1
              # Single feature -> show
              url += features[0].get("id")
              url += "&mobile=" + KS.getUrlParam("mobile") if KS.getUrlParam("mobile")
              $.ajax(url: url, dataType: 'script')
            else if map.getView().getZoom() == KS.maxZoom
              ids = Array()
              $(features).each (ix, feature) ->
                ids.push feature.get('id')
              url += "&mobile=" + KS.getUrlParam("mobile") if KS.getUrlParam("mobile")
              $.ajax(url: url, dataType: 'script', data: { ids: ids })
            else
              # Zoom in
              map.getView().setCenter e.coordinate
              current_zoom = map.getView().getZoom()
              if current_zoom == undefined
                current_zoom = zoom
              map.getView().setZoom parseInt(current_zoom + 1)

    map.on 'moveend', (e) ->
      if !KS.zoomEvent && KS.layers.findById("features").getSource().getFeatures().length > 0
        KS.reloadFeatures()

      KS.zoomEvent = false if KS.zoomEvent

    map.getView().on 'change:resolution', (e) ->
      KS.zoomEvent = true

KS.styles =
  featureAttribution: (feature) ->
    new ol.style.Text
      text: feature.get("attribution")
      font: '15px Glyphicons Halflings'
      offsetX: 28
      offsetY: -22
      rotation: Math.PI / -2
      fill: new ol.style.Fill
        color: '#ffffff'
      stroke: new ol.style.Stroke
        color: '#000000'
        width: 3

  jobStyle: (features) ->
    feature = features.get('features')[0]
    features.setStyle new ol.style.Style
      image: new ol.style.Icon
        anchorXUnits: 'pixels'
        anchorYUnits: 'pixels'
        anchor: [
          16
          50
        ]
        src: feature.get('icon')
      text: KS.styles.featureAttribution(feature)

  featureStyle: (features) ->
    if (size = features.get('features').length) == 1
      feature = features.get('features')[0]
      features.setStyle new ol.style.Style
        image: new ol.style.Icon
          anchorXUnits: 'pixels'
          anchorYUnits: 'pixels'
          anchor: [
            6
            40
          ]
          src: feature.get('icon')
        text: KS.styles.featureAttribution(feature)
    else
      features.setStyle new ol.style.Style
        image: new ol.style.Icon
          anchorXUnits: 'pixels'
          anchorYUnits: 'pixels'
          anchor: [
            22
            22
          ]
          src: KS.imagePath('cluster')
        text: new ol.style.Text
          text: size.toString()
          font: 'bold 20px Verdana'
          fill: new ol.style.Fill
            color: '#000000'
    
  observationStyle: (feature) ->
    feature.setStyle new ol.style.Style
      stroke: new ol.style.Stroke
        color: '#FF8700'
      fill: new ol.style.Fill
        color: 'rgba(255,135,0,0.5)'
      text: new ol.style.Text
        font: 'bold 11px Verdana'
        text: feature.get('name') || ''
        stroke: new ol.style.Stroke
          color: '#FFFFFF'
          width: 3
        fill: new ol.style.Fill
          color: '#FF8700'

  newFeature: (type) ->
    new ol.style.Style
      image: new ol.style.Icon
        anchorXUnits: 'pixels'
        anchorYUnits: 'pixels'
        anchor: [
          16
          50
        ]
        src: KS.imagePath("new-#{ type }")

  location: ->
    styles = [ new ol.style.Style
      fill: new ol.style.Fill
        color: 'rgba(200,0,255,0.2)'
      stroke: new ol.style.Stroke
        color: '#c800ff'
        width: 1
      image: new ol.style.Circle
        fill: new ol.style.Fill
          color: '#c800ff'
        stroke: new ol.style.Stroke
          color: '#c800ff'
          width: 2
        radius: 6
    ]

KS.highlightStyle= (feature, icon) ->
    feature.setStyle new ol.style.Style
      image: new ol.style.Icon
        anchorXUnits: 'pixels'
        anchorYUnits: 'pixels'
        anchor: [
          16
          50
        ]
        src: icon
      text: KS.styles.featureAttribution(feature)

KS.imagePath = (type) ->
  $("#image-sources img##{ type }").attr 'src'


class KS.Layers
  constructor: (map, requests) ->
    @active = 0
    @layers = []
    for layer in <%= Settings::Map.wmts_layers.to_json %>
      do (layer, @layers) ->
        @layers.push new ol.layer.Tile
          projection: KS.projection()
          extent: layer.extent
          source: new ol.source.WMTS
            url: layer.url
            layer: layer.content
            matrixSet: layer.matrix_set
            format: layer.format
            requestEncoding: layer.request_encoding
            tileGrid: new ol.tilegrid.WMTS
              origin: layer.tilegrid_origin
              resolutions: layer.resolutions
              matrixIds: layer.matrix_ids
            attributions: [
              new ol.Attribution
                html: layer.attribution
            ] if layer.attribution?
          visible: layer.visible
    for layer in <%= Settings::Map.wms_layers.to_json %>
      do (layer, @layers) ->
        @layers.push new ol.layer.Image
          projection: KS.projection()
          extent: layer.extent
          source: new ol.source.ImageWMS
            url: layer.url
            params:
              "LAYERS": layer.content
              "FORMAT": layer.format
          visible: layer.visible

    @layers.push new ol.layer.Vector
      id: "features"
      source: new ol.source.Cluster
        distance: 55
        source: new KS.FeatureVector(KS.requests_path, true)
      style: KS.styles.featureStyle
      visible: true
    
    if KS.login_required
      @layers.push new ol.layer.Vector
        id: "jobs"
        source: new ol.source.Cluster
          distance: 0
          source: new KS.FeatureVector(KS.jobs_path)
        style: KS.styles.jobStyle
        visible: true
    
    observations = new ol.layer.Vector
      id: 'observations'
      source: new ol.source.Vector
      style: KS.styles.observationStyle
      visible: false

    KS.createObservationFeatures(KS.areas_path, observations)
    @layers.push observations

    @layers.push new ol.layer.Vector
      id: 'draw_observation'
      source: new ol.source.Vector
      style: KS.styles.observationStyle
      visible: false
    
    @layers.push new ol.layer.Vector
      id: 'highlight_layer'
      source: new ol.source.Vector
      style: KS.styles.highlightStyle
      visible: true

    map.addLayer layer for layer in @layers

  toggle: ->
      @active = (@active + 1) % 2
      layer.setVisible(i > 1 || i == @active) for layer, i in @layers

  findById: (id) ->
    layers = KS.olMap.getLayers()
    i = 0
    while i < layers.getLength()
      tmp = layers.item(i)
      if tmp.get('id') == id
        return tmp
      i++
    null

KS.createObservationFeatures= (controller, layer) ->
  $.ajax(url: controller, dataType: 'json').done (response) ->
    $.each response, (index, elem) ->
      format = new ol.format.WKT()
      f = format.readFeature(elem.grenze)
      f.set('id', elem.id)
      f.set('name', elem.name)
      f.set('selected', false)
      layer.getSource().addFeature f

class KS.FeatureVector
  constructor: (controller, is_request = false) ->
    return vector = new ol.source.ServerVector
      format: new ol.format.TopoJSON
      loader: (extent, resolution, projection) ->
        new KS.FeatureData(controller, extent, vector, is_request)
      projection: KS.projection()


class KS.FeatureData
  constructor: (controller, extent, vector, is_request = false) ->
    controller = KS.generatePath() if is_request
    ls = new ol.geom.LineString([ol.extent.getBottomLeft(extent), ol.extent.getTopRight(extent)])
    extent = ol.proj.transformExtent(extent, KS.projection(), KS.projectionWGS84)
    wgs84Sphere = new ol.Sphere(6378137)
    $.ajax(url: controller, dataType: 'json', data: {
      center: ol.extent.getCenter(extent),
      radius: wgs84Sphere.haversineDistance(ol.extent.getBottomLeft(extent), ol.extent.getCenter(extent))
    }).done (response) ->
      features = new Array
      $.each response, (index, elem) ->
        attribution = ""
        attribution = "" if elem.extended_attributes.photo_required
        if KS.login_required
          <% if Settings::Map.show_trust %>
          count = 1
          while count <= elem.extended_attributes.trust
            attribution += ""
            count++
          <% end %>

        coord = ol.proj.transform([elem.long, elem.lat], KS.projectionWGS84, KS.projection())
        f = new ol.Feature
          id: elem.service_request_id
          geometry: new ol.geom.Point(coord)
          icon: elem.icon_map
          attribution: attribution
        features.push f
      vector.clear true
      vector.addFeatures features

class KS.Geolocation
  constructor: (map) ->
    geolocation = new ol.Geolocation
      tracking: true
      trackingOptions:
        enableHighAccuracy: <%= Settings::Map.tracking_options[:enable_high_accuracy] %>
        timeout: <%= Settings::Map.tracking_options[:timeout] %>
        maximumAge: <%= Settings::Map.tracking_options[:maximum_age] %>
      projection: map.getView().getProjection().getCode()

    geolocation.on 'change', ->
      feature_array = []
      if KS.getUrlParam('mobile')
        accuracy_feature = new ol.Feature
        accuracy_feature.bindTo 'geometry', geolocation, 'accuracyGeometry'
        accuracy_feature.setStyle KS.styles.location()
        feature_array.push(accuracy_feature)

      position_feature = new ol.Feature
        geometry: new ol.geom.Point(geolocation.getPosition())
      position_feature.setStyle KS.styles.location()
      feature_array.push(position_feature)

      featuresOverlay = new ol.FeatureOverlay
        features: feature_array

      map.removeOverlay overlay for overlay in map.getOverlays().getArray()
      map.addOverlay featuresOverlay

      unless KS.position
        KS.geolocation.center(map) if KS.geolocation?
      KS.position = geolocation.getPosition()

  center: (map) ->
    overlays = map.getOverlays().getArray()
    if(overlays.length > 0)
      map.getView().fitExtent(
        overlays[0].getFeatures().getArray()[0].getGeometry().getExtent(), map.getSize()
      )


KS.map =
  actions: ->
    $('#ol-map > nav.navbar.actions')

KS.createFeature= (type) ->

  KS.newFeatureOverlay.setStyle KS.styles.newFeature(type)
  KS.clearNewFeature()

  position = KS.olMap.getView().getCenter()
  if KS.position && ol.extent.containsCoordinate(KS.olMap.getView().calculateExtent(
          KS.olMap.getSize()), KS.position)
    position = KS.position

  feature = new ol.Feature(
    geometry: new ol.geom.Point(position)
  )

  KS.newFeatureInteraction = new ol.interaction.Modify(
    features: new ol.Collection([feature])
    pixelTolerance: 50
    style: KS.newFeatureOverlay.getStyle()
  )
  KS.olMap.addInteraction KS.newFeatureInteraction
  KS.newFeatureOverlay.addFeature feature

KS.clearNewFeature= () ->
  KS.newFeatureOverlay.removeFeature feature for feature in KS.newFeatureOverlay.getFeatures().getArray()
  if KS.newFeatureInteraction
    KS.olMap.removeInteraction KS.newFeatureInteraction

KS.reloadFeatures= () ->
  extent = KS.olMap.getView().calculateExtent(KS.olMap.getSize())
  new KS.FeatureData(KS.generatePath(), extent, KS.layers.findById("features").getSource().getSource(), true)
  if KS.login_required
    new KS.FeatureData(KS.jobs_path, extent, KS.layers.findById("jobs").getSource().getSource())

KS.generatePath= () ->
  params = KS.getMapPanelParams()
  path = KS.requests_path
  path += "#{ if path.contains?('?') then '&' else '?' }mobile=" + KS.getUrlParam('mobile') if KS.getUrlParam('mobile')
  path += "#{ if path.contains?('?') then '&' else '?' }" + params
  path

KS.resetSelectedFeatures= () ->
  if (layer = KS.layers.findById('observations')) && layer.getVisible()
    layer.setVisible(false)
    for feature in layer.getSource().getFeatures()
      if feature.get('selected')
        feature.set('selected', false)
        feature.getStyle().getFill().setColor('rgba(255,135,0,0.5)')
        feature.getStyle().getText().getFill().setColor('#FF8700')

KS.setDrawObservation= () ->
  layer = KS.layers.findById('draw_observation')
  unless layer.getVisible()
    KS.draw_observation = new ol.interaction.Draw
      source: layer.getSource()
      type: 'MultiPolygon'
      style: KS.styles.observationStyle
    layer.setVisible(true)
    KS.olMap.addInteraction(KS.draw_observation)

    KS.draw_observation.on 'drawend', () ->
      KS.olMap.removeInteraction(KS.draw_observation)
      $('#' + KS.olMap.getTarget()).css('cursor', 'auto')

    $('#' + KS.olMap.getTarget()).css('cursor', 'crosshair')

KS.removeDrawObservation= () ->
  if (layer = KS.layers.findById('draw_observation')) && layer.getVisible()
    layer.setVisible(false)
    KS.olMap.removeInteraction(KS.draw_observation)
    $('#' + KS.olMap.getTarget()).css('cursor', 'auto')
    layer.getSource().clear()

KS.createHighlightFeature= (layer, coord, icon) ->
  f = new ol.Feature
    geometry: new ol.geom.Point(coord)
    type: 'Point'
  KS.highlightStyle(f, icon)
  layer.getSource().addFeature f

#eine 'show'-Anfrage gegen den Requests-Controller senden, wenn im URL-Query ein 'request'-Parameter gefunden wurde
if id = KS.getUrlParam('request')
  $.ajax(url: KS.requests_path + id + '/?direct=true', dataType: 'script')

$ ->
  KS.olMap = new KS.Map

  $(document).on('click', 'a.describe', (event) ->
    if (features = KS.newFeatureOverlay.getFeatures().getArray()).length > 0
      $.ajax
        url: $(@).attr('href')
        data:
          position: features[0].getGeometry().clone().transform(KS.projection(), KS.projectionWGS84).getCoordinates()
        dataType: 'script'
    return false
  ).on('click', 'a.cancel', ->
    KS.clearNewFeature()
    KS.map.actions().addClass 'hidden'
    return false
  )
