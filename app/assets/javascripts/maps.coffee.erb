KS.projection = ->
  if typeof proj4 is 'function'
    proj4.defs 'EPSG:25833', '+proj=utm +zone=33 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs'
    proj4.defs 'urn:ogc:def:crs:EPSG::25833', proj4.defs('EPSG:25833')
    ol.proj.proj4.register proj4
    projection_25833 = ol.proj.get 'EPSG:25833'
    projection_25833.setExtent <%= Settings::Map.mv_bbox_25833 %>
    return projection_25833
  else
    console.log 'Proj4J ist nicht geladen!'

KS.maxZoom = <%= Settings::Map.zoom[:max] %>
KS.projectionWGS84 = ol.proj.get 'EPSG:4326'
#KS.zoomEvent = false
KS.requests_path = "<%= Settings::Route.requests_path %>/"
KS.jobs_path = "<%= Settings::Route.jobs_path %>/"
KS.job_notification_path = "<%= Settings::Route.jobs_notification_path %>/"
KS.areas_path = "<%= Settings::Route.areas_path %>/?with_districts=true"
KS.login_required = <%= Settings::Client.login_required %>
KS.draw_observation = null
KS.animateRefresh = <%= Settings::Client.animate_refresh %> * 1000

KS.GeolocationControl = () ->
  span = document.createElement('i')
  span.className = 'fas fa-crosshairs'
  btn = document.createElement('button')
  btn.appendChild(span)
  text_span = document.createElement('span')
  text_span.className = 'text'
  text_span.innerHTML = " <%= I18n.t(:locate) %>"
  btn.appendChild(text_span)
  setGeolocation = () ->
    KS.geolocation.geolocation.setTracking(true)
    KS.geolocation.center(KS.olMap)
  btn.addEventListener('click', setGeolocation, false)
  elem = document.createElement('div')
  elem.className = 'geolocation ol-unselectable ol-control'
  elem.appendChild(btn)

  ol.control.Control.call this,
    element: elem
    target: {}.target

ol.inherits(KS.GeolocationControl, ol.control.Control)

KS.ViewSwitcherControl = () ->
  span = document.createElement('span')
  span.className = 'image'
  image = document.createElement('img')
  image.src = KS.imagePath('aerial')
  span.appendChild(image)
  btn = document.createElement('button')
  btn.appendChild(span)
  text_span = document.createElement('span')
  text_span.className = 'text'
  text_span.innerHTML = "<%= I18n.t(:aerial_view) %>"
  btn.appendChild(text_span)
  toggleVisibleLayer = () ->
    if KS.layers.layers[0].getVisible()
      $('.view-switcher span.image img')[0].src = KS.imagePath('map')
      text_span.innerHTML = "<%= I18n.t(:map_view) %>"
    else
      $('.view-switcher span.image img')[0].src = KS.imagePath('aerial')
      text_span.innerHTML = "<%= I18n.t(:aerial_view) %>"
    KS.layers.layers[0].setVisible(!KS.layers.layers[0].getVisible())
    KS.layers.layers[1].setVisible(!KS.layers.layers[1].getVisible())
  btn.addEventListener('click', toggleVisibleLayer, false)
  elem = document.createElement('div')
  elem.className = 'view-switcher ol-control'
  elem.appendChild(btn)

  ol.control.Control.call this,
    element: elem
    target: {}.target
ol.inherits(KS.ViewSwitcherControl, ol.control.Control)

class KS.Map
  constructor: (@projection = KS.projection()) ->
    KS.popupContainer = document.getElementById('popup')
    KS.popupContent = document.getElementById('popup-content')
    KS.crosshair = document.getElementById('crosshair')
    $(KS.popupContent).on('click', '#open-request', (event) ->
      event.preventDefault()
      target = $(event.currentTarget)
      $.ajax(url: target.data('url'), dataType: 'script')
    )
    KS.popupCloser = document.getElementById('popup-closer')

    mapView = new ol.View
      projection: @projection
      center: <%= Settings::Map.center %>
      zoom: <%= Settings::Map.zoom[:initial] %>
      maxZoom: KS.maxZoom
      minZoom: <%= Settings::Map.zoom[:min] %>

    if region = KS.getUrlParam('region')
      $.ajax(url: KS.areas_path + '&region=' + region + '&search_class=authority', dataType: 'json').done (response) ->
        elem = response[0]
        format = new ol.format.WKT()
        grenze = format.readFeature(elem.grenze)
        mapView.fit grenze.getGeometry().transform(KS.projectionWGS84, KS.projection()).getExtent()

    @olMap = new ol.Map
      target: 'ol-map'
      moveTolerance: 10
      controls: ol.control.defaults().extend([new KS.GeolocationControl, new KS.ViewSwitcherControl])
      view: mapView
    KS.layers = new KS.Layers(@olMap)
    addControls(@olMap)
    KS.geolocation = new KS.Geolocation(@olMap)
    return @olMap

  addControls = (map) ->
    map.addControl new ol.control.ScaleLine

    map.on 'pointermove', (e) ->
      pixel = map.getEventPixel(e.originalEvent)
      hit = map.hasFeatureAtPixel(pixel)
      if (hit)
        map.getViewport().style.cursor = 'pointer'
      else
        map.getViewport().style.cursor = ''

    map.on 'click', (e) ->
      if KS.olMap.getInteractions().getArray().some((el) -> el instanceof ol.interaction.Translate)
        KS.moveNewFeature e.coordinate unless KS.getUrlParam('mobile')
      else
        map.forEachFeatureAtPixel e.pixel, (feature, layer) ->
          if layer
            if layer.get('id') == 'observations'
              feature.set('selected', !feature.get('selected'))
              if feature.get('selected')
                feature.getStyle().getFill().setColor('rgba(255,0,255,0.5)')
                feature.getStyle().getText().getFill().setColor('#FF00FF')
              else
                feature.getStyle().getFill().setColor('rgba(255,135,0,0.5)')
                feature.getStyle().getText().getFill().setColor('#FF8700')
            else if !KS.layers.findById('observations').getVisible() &&
            !KS.layers.findById('draw_observation').getVisible() &&
            (layer.get('id') in ['features', 'jobs'])
              features = feature.get('features')
              url = KS.requests_path
              if features.length == 1
                # Single feature -> show
                if KS.popupContainer != null
                  url += features[0].get("id")
                  url += "#{ if url.contains?('?') then '&' else '?' }mobile_popup=true"
                  url += "&mobile=" + KS.getUrlParam("mobile") if KS.getUrlParam("mobile")
                  $.ajax(url: url, dataType: 'script')
                  KS.popupOverlay.setPosition(features[0].getGeometry().getCoordinates())
                  KS.olMap.getView().setCenter(features[0].getGeometry().getCoordinates())
                else
                  url += features[0].get("id")
                  url += "#{ if url.contains?('?') then '&' else '?' }mobile=" + KS.getUrlParam("mobile") if KS.getUrlParam("mobile")
                  $.ajax(url: url, dataType: 'script')
              else if map.getView().getZoom() == KS.maxZoom
                ids = Array()
                $(features).each (ix, feature) ->
                  ids.push feature.get('id')
                url += "#{ if url.contains?('?') then '&' else '?' }mobile=" + KS.getUrlParam("mobile") if KS.getUrlParam("mobile")
                $.ajax(url: url, dataType: 'script', data: { ids: ids })
              else
                # Zoom in
                map.getView().setCenter e.coordinate
                current_zoom = map.getView().getZoom()
                if current_zoom == undefined
                  current_zoom = zoom
                map.getView().setZoom parseInt(current_zoom + 1)

    map.on 'moveend', (e) ->
      KS.moveNewFeature() if KS.getUrlParam('mobile')
      KS.reloadFeatures()

class KS.MiniMap
  constructor: (@projection = KS.projection()) ->
    coords = ol.proj.transform([$('#ol-minimap').data('long'), $('#ol-minimap').data('lat')], KS.projectionWGS84, @projection)
    @olMiniMap = new ol.Map
      target: 'ol-minimap'
      controls: []
      view: new ol.View
        projection: @projection
        center: coords
        zoom: 12
    @olMiniMap.getInteractions().forEach (interaction) ->
      interaction.setActive false
    KS.miniMapLayers = new KS.Layers(@olMiniMap, false)

    mapLayers = KS.olMap.getLayers()
    i = 0
    while i < mapLayers.getLength()
      tmp = mapLayers.item(i)
      layer = KS.miniMapLayers.findById(tmp.get('id'), @olMiniMap)
      layer.setVisible(tmp.getVisible())
      i++

    layer = KS.miniMapLayers.findById('features', @olMiniMap)
    layer.setVisible(false)

    if (type = $('#ol-minimap').data('type'))
      if icon = $('#ol-minimap').data('icon-map')
        feature = new ol.Feature(
          geometry: new ol.geom.Point(coords)
          type: type
          animate: false
        )
        layer = KS.miniMapLayers.findById('highlight_layer', @olMiniMap)
        KS.highlightStyle(feature, icon)
        layer.getSource().addFeature(feature)
        layer.setStyle(KS.styles.newFeature(type))
      else
        feature = new ol.Feature(
          geometry: new ol.geom.Point(coords)
          type: type
          animate: false
        )
        layer = KS.miniMapLayers.findById('new_feature', @olMiniMap)
        layer.getSource().addFeature(feature)
        layer.setStyle(KS.styles.newFeature(type))
    return @olMiniMap

KS.styles =
  featureAttribution: (feature) ->
    new ol.style.Text
      text: feature.get("attribution")
      font: '900 15px "Font Awesome 5 Free"'
      offsetX: 28
      offsetY: -22
      rotation: Math.PI / -2
      fill: new ol.style.Fill
        color: '#ffffff'
      stroke: new ol.style.Stroke
        color: '#000000'
        width: 3

  jobStyle: (features) ->
    feature = features.get('features')[0]
    features.setStyle new ol.style.Style
      image: new ol.style.Icon
        anchorXUnits: 'pixels'
        anchorYUnits: 'pixels'
        anchor: [
          16
          50
        ]
        src: feature.get('icon')
      text: KS.styles.featureAttribution(feature)

  featureStyle: (features) ->
    if (size = features.get('features').length) == 1
      feature = features.get('features')[0]
      features.setStyle new ol.style.Style
        image: new ol.style.Icon
          anchorXUnits: 'pixels'
          anchorYUnits: 'pixels'
          anchor: [
            6
            40
          ]
          src: feature.get('icon')
        text: KS.styles.featureAttribution(feature)
    else
      features.setStyle new ol.style.Style
        image: new ol.style.Icon
          anchorXUnits: 'pixels'
          anchorYUnits: 'pixels'
          anchor: [
            22
            22
          ]
          src: KS.imagePath('cluster')
        text: new ol.style.Text
          text: size.toString()
          font: 'bold 20px PT Sans, Helvetica Neue, Helvetica, Arial, sans-serif'
          fill: new ol.style.Fill
            color: '#000000'
    
  observationStyle: (feature) ->
    feature.setStyle new ol.style.Style
      stroke: new ol.style.Stroke
        color: '#FF8700'
      fill: new ol.style.Fill
        color: 'rgba(255,135,0,0.5)'
      text: new ol.style.Text
        font: 'bold 13px PT Sans, Helvetica Neue, Helvetica, Arial, sans-serif'
        text: feature.get('name') || ''
        stroke: new ol.style.Stroke
          color: '#FFFFFF'
          width: 4
        fill: new ol.style.Fill
          color: '#FF8700'

  newFeature: (type) ->
    new ol.style.Style
      image: new ol.style.Icon
        anchorXUnits: 'pixels'
        anchorYUnits: 'pixels'
        anchor: [
          16
          50
        ]
        src: KS.imagePath("new-#{ type }")
        size: [56, 64]

  location: ->
    styles = [ new ol.style.Style
      fill: new ol.style.Fill
        color: 'rgba(200,0,255,0.2)'
      stroke: new ol.style.Stroke
        color: '#c800ff'
        width: 1
      image: new ol.style.Circle
        fill: new ol.style.Fill
          color: '#c800ff'
        stroke: new ol.style.Stroke
          color: '#c800ff'
          width: 2
        radius: 6
    ]

KS.highlightStyle= (feature, icon) ->
  feature.setStyle new ol.style.Style
    image: new ol.style.Icon
      anchorXUnits: 'pixels'
      anchorYUnits: 'pixels'
      anchor: [
        16
        50
      ]
      src: icon
    text: KS.styles.featureAttribution(feature)

KS.imagePath = (type) ->
  $("#image-sources img##{ type }").attr 'src'


class KS.Layers
  constructor: (map, overlay = true) ->
    @active = 0
    @layers = []
    for layer in <%= Settings::Map.wmts_layers.to_json %>
      do (layer, @layers) ->
        @layers.push new ol.layer.Tile
          id: layer.id
          extent: layer.extent
          source: new ol.source.WMTS
            url: layer.url
            layer: layer.content
            matrixSet: layer.matrix_set
            format: layer.format
            requestEncoding: layer.request_encoding
            tileGrid: new ol.tilegrid.WMTS
              origin: layer.tilegrid_origin
              resolutions: layer.resolutions
              matrixIds: layer.matrix_ids
            attributions: if layer.attribution? then 'layer.attribution' else null
          visible: layer.visible
    for layer in <%= Settings::Map.wms_layers.to_json %>
      do (layer, @layers) ->
        @layers.push new ol.layer.Image
          id: layer.id
          extent: layer.extent
          source: new ol.source.ImageWMS
            url: layer.url
            params:
              "LAYERS": layer.content
              "FORMAT": layer.format
          visible: layer.visible

    @layers.push new ol.layer.Vector
      id: "features"
      source: new ol.source.Cluster
        distance: 55
        source: new KS.FeatureVector(KS.requests_path, true)
      style: KS.styles.featureStyle
      visible: true
    
    if KS.login_required && KS.getUrlParam('mobile')
      @layers.push new ol.layer.Vector
        id: "jobs"
        source: new ol.source.Cluster
          distance: 0
          source: new KS.FeatureVector(KS.jobs_path)
        style: KS.styles.jobStyle
        visible: true
    
    @layers.push new ol.layer.Vector
      id: 'observations'
      source: new ol.source.Vector
      style: KS.styles.observationStyle
      visible: false

    @layers.push new ol.layer.Vector
      id: 'draw_observation'
      source: new ol.source.Vector
      style: KS.styles.observationStyle
      visible: false
    
    @layers.push new ol.layer.Vector
      id: 'highlight_layer'
      source: new ol.source.Vector
      style: KS.styles.highlightStyle
      visible: true

    @layers.push new ol.layer.Vector
      id: 'new_feature'
      source: new ol.source.Vector
      visible: true

    map.addLayer layer for layer in @layers

    if overlay && KS.popupContainer != null
      KS.popupOverlay = new ol.Overlay
        element: KS.popupContainer
        stopEvent: true
        positioning: 'top-center'
      map.addOverlay KS.popupOverlay

      KS.popupCloser.onclick = ->
        KS.popupOverlay.setPosition(undefined)
        KS.popupCloser.blur()
        highlight_layer = KS.layers.findById('highlight_layer')
        highlight_layer.getSource().clear()
        return false

  toggle: ->
      @active = (@active + 1) % 2
      layer.setVisible(i > 1 || i == @active) for layer, i in @layers

  findById: (id, map = KS.olMap) ->
    layers = map.getLayers()
    i = 0
    while i < layers.getLength()
      tmp = layers.item(i)
      if tmp.get('id') == id
        return tmp
      i++
    null

KS.createObservationFeatures= (controller, layer) ->
  layer.getSource().clear()
  $.ajax(
    url: controller,
    dataType: 'json',
    data:
      center: ol.proj.transform(KS.olMap.getView().getCenter(), KS.projection(), KS.projectionWGS84)
  ).done (response) ->
    $.each response, (index, elem) ->
      format = new ol.format.WKT()
      f = format.readFeature(elem.grenze)
      f.getGeometry().transform(KS.projectionWGS84, KS.projection())
      f.set('id', elem.id)
      f.set('name', elem.name)
      f.set('selected', false)
      layer.getSource().addFeature f

class KS.FeatureVector
  constructor: (controller, is_request = false) ->
    return vector = new ol.source.Vector
      format: new ol.format.TopoJSON
      loader: (extent, resolution, projection) ->
        extent = KS.olMap.getView().calculateExtent(KS.olMap.getSize())
        new KS.FeatureData(controller, extent, vector, is_request)


class KS.FeatureData
  constructor: (controller, extent, vector, is_request = false) ->
    controller = KS.generatePath() if is_request
    extent = ol.proj.transformExtent(extent, KS.projection(), KS.projectionWGS84)
    $.ajax(url: controller, dataType: 'json', data: {
      center: ol.extent.getCenter(extent),
      radius: ol.sphere.getDistance(ol.extent.getBottomLeft(extent), ol.extent.getCenter(extent))
    }).done (response) ->
      features = new Array
      $.each response, (index, elem) ->
        attribution = ""
        attribution = "\uf030" if elem.extended_attributes.photo_required
        <% if Settings::Map.show_trust %>
        if KS.login_required
          count = 1
          while count <= elem.extended_attributes.trust
            attribution += "\uf005"
            count++
        <% end %>

        coord = ol.proj.transform([elem.long, elem.lat], KS.projectionWGS84, KS.projection())
        f = new ol.Feature
          id: elem.service_request_id
          geometry: new ol.geom.Point(coord)
          icon: elem.icon_map
          attribution: attribution
        f.setId(elem.service_request_id)
        features.push f
      vector.addFeatures features

class KS.Geolocation
  constructor: (map) ->
    @geolocation = new ol.Geolocation
      tracking: KS.getUrlParam('mobile') != null
      trackingOptions:
        enableHighAccuracy: <%= Settings::Map.tracking_options[:enable_high_accuracy] %>
        timeout: <%= Settings::Map.tracking_options[:timeout] %>
        maximumAge: <%= Settings::Map.tracking_options[:maximum_age] %>
      projection: map.getView().getProjection().getCode()

    @geolocation.on 'change', ->
      feature_array = []
      if KS.getUrlParam('mobile')
        accuracy_feature = new ol.Feature
        accuracy_feature.setGeometry(this.getAccuracyGeometry())
        accuracy_feature.setStyle KS.styles.location()
        feature_array.push(accuracy_feature)

      position_feature = new ol.Feature
        geometry: new ol.geom.Point(this.getPosition())
      position_feature.setStyle KS.styles.location()
      feature_array.push(position_feature)

      featuresOverlay = new ol.layer.Vector
        id: 'geolocation'
        source: new ol.source.Vector
          features: feature_array

      if layer = KS.layers.findById('geolocation')
        layer.getSource().clear(true)
        map.removeLayer layer

      map.addLayer featuresOverlay

      unless KS.position
        KS.geolocation.center(map) if KS.geolocation?
      KS.position = this.getPosition()

  center: (map) ->
    if(layer = KS.layers.findById('geolocation')) && (features = layer.getSource().getFeatures()).length > 0
      KS.olMap.getView().fit(features[0].getGeometry().getExtent(), { size: KS.olMap.getSize(), maxZoom: KS.maxZoom - 1 })
      KS.moveNewFeature()

KS.map =
  actions: ->
    $('#ol-map > nav.navbar.actions')

KS.createFeature= (type, coord) ->

  KS.clearNewFeature()

  layer = KS.layers.findById('new_feature')
  if KS.getUrlParam('mobile')
    $('#crosshair').show()
  else
    layer.setStyle(KS.styles.newFeature(type))

  position = coord || KS.olMap.getView().getCenter()
  if KS.getUrlParam('mobile') && KS.position && ol.extent.containsCoordinate(KS.olMap.getView().calculateExtent(
          KS.olMap.getSize()), KS.position)
    position = KS.position

  feature = new ol.Feature(
    geometry: new ol.geom.Point(position)
    type: type
    animate: true
  )

  KS.addNewFeatureInteraction(layer, feature)
  layer.getSource().addFeature(feature)
  setTimeout(KS.refreshAnimation, 0) unless KS.getUrlParam('mobile')

KS.addNewFeatureInteraction = (layer, feature) ->
  KS.newFeatureInteraction = new ol.interaction.Translate(
    features: new ol.Collection([feature])
    hitTolerance: 10
  )

  KS.newFeatureInteraction.on 'translatestart', (e) ->
    KS.stopAnimationTimeout()
    feature.set('animate', false)

  KS.olMap.addInteraction KS.newFeatureInteraction

KS.animateNewFeature= (layer, feature) ->
  style = layer.getStyle().clone()
  style.getImage().setOpacity(0.01)
  KS.animation = layer.animateFeature feature,
    new (ol.featureAnimation['Bounce'])(
      duration: Number(2000)
      hiddenStyle: style
    )

KS.refreshAnimation = () ->
  layer = KS.layers.findById('new_feature')
  if (feature = layer.getSource().getFeatures()[0]) && feature.get('animate')
    KS.animateNewFeature(layer, feature)
    KS.animationId = setTimeout(KS.refreshAnimation, KS.animateRefresh)

KS.clearNewFeature= () ->
  KS.stopAnimationTimeout()
  layer = KS.layers.findById('new_feature')
  if layer.getSource().getFeatures().length > 0
    if KS.newFeatureInteraction
      KS.olMap.removeInteraction KS.newFeatureInteraction
    layer.getSource().clear(true)
  $('#crosshair').hide()

KS.moveNewFeature= (coord) ->
  layer = KS.layers.findById('new_feature')
  if feat = layer.getSource().getFeatures()[0]
    KS.stopAnimationTimeout()
    pos = coord || KS.olMap.getView().getCenter().slice(0, 2)
    feat.set('animate', false)
    feat.getGeometry().setCoordinates(pos)


KS.stopAnimationTimeout = () ->
  if KS.animation && KS.animation.isPlaying()
    KS.animation.stop()
  if KS.animationId
    clearTimeout(KS.animationId)
    KS.animationId = null

KS.generatePath= () ->
  params = KS.getMapPanelParams()
  path = KS.requests_path
  path += "#{ if path.contains?('?') then '&' else '?' }mobile=" + KS.getUrlParam('mobile') if KS.getUrlParam('mobile')
  unless params == ''
    path += "#{ if path.contains?('?') then '&' else '?' }#{ params }"
  path

KS.resetSelectedFeatures= () ->
  if (layer = KS.layers.findById('observations')) && layer.getVisible()
    layer.setVisible(false)
    for feature in layer.getSource().getFeatures()
      if feature.get('selected')
        feature.set('selected', false)
        feature.getStyle().getFill().setColor('rgba(255,135,0,0.5)')
        feature.getStyle().getText().getFill().setColor('#FF8700')

KS.setDrawObservation= () ->
  layer = KS.layers.findById('draw_observation')
  unless layer.getVisible()
    KS.draw_observation = new ol.interaction.Draw
      source: layer.getSource()
      type: 'MultiPolygon'
      style: KS.styles.observationStyle
    layer.setVisible(true)
    KS.olMap.addInteraction(KS.draw_observation)

    KS.draw_observation.on 'drawend', () ->
      KS.olMap.removeInteraction(KS.draw_observation)
      $('#' + KS.olMap.getTarget()).css('cursor', 'auto')

    $('#' + KS.olMap.getTarget()).css('cursor', 'crosshair')

KS.removeDrawObservation= () ->
  if (layer = KS.layers.findById('draw_observation')) && layer.getVisible()
    layer.setVisible(false)
    KS.olMap.removeInteraction(KS.draw_observation)
    $('#' + KS.olMap.getTarget()).css('cursor', 'auto')
    layer.getSource().clear()

KS.createHighlightFeature= (layer, coord, icon) ->
  f = new ol.Feature
    geometry: new ol.geom.Point(coord)
    type: 'Point'
  KS.highlightStyle(f, icon)
  layer.getSource().addFeature f

#eine 'show'-Anfrage gegen den Requests-Controller senden, wenn im URL-Query ein 'request'-Parameter gefunden wurde
if id = KS.getUrlParam('request')
  url = KS.requests_path + id + '/?direct=true'
  if KS.getUrlParam('mobile')
    url += '&mobile=true'
  $.ajax(url: url, dataType: 'script')

$ ->
  KS.olMap = new KS.Map

  $(document).on('click', 'a.describe', (event) ->
    if (layer = KS.layers.findById('new_feature')) && (features = layer.getSource().getFeatures()).length > 0
      $.ajax
        url: $(@).attr('href')
        data:
          position: features[0].getGeometry().clone().transform(KS.projection(), KS.projectionWGS84).getCoordinates()
        dataType: 'script'
    return false
  ).on('click', 'a.cancel', ->
    console.log 'cancel click'
    KS.clearNewFeature()
    KS.map.actions().addClass 'invisible'
    return false
  )
