# This is a manifest file that'll be compiled into application.js, which will include all the files
# listed below.
#
# Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,
# or any plugin's vendor/assets/javascripts directory can be referenced here using a relative path.
#
# It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
# compiled file.
#
# Read Sprockets README (https://github.com/sstephenson/sprockets#sprockets-directives) for details
# about supported directives.
#
#= require jquery
#= require jquery_ujs
#= require jquery.form
#= require jquery.textresizer
#= require jquery-ui
#= require jquery-ui/widgets/autocomplete
#= require jquery-ui/widgets/sortable
#= require jquery.ui.touch-punch
#= require turbolinks
#= require bootstrap-sprockets
#= require proj4js
#= require shariff.complete
#= require_self
#= require_tree .
#= require ol3-ext
#= require d3-v4
#= require billboard

window.KS ||= {}

KS.autoRefreshTime = <%= Settings::AutoRefresh.timeout %>

KS.content = (filter) ->
  root = $('div#content')
  return root unless filter?
  if (div = root.children("div.#{ filter }"))?.length > 0 then div else null

KS.autoRefresh = () ->
  glyphiconRefresh = KS.content().find('.requests').find('.glyphicon-refresh')
  if (map = KS.olMap)?
    if $(map.getViewport()).is(':visible')
      KS.reloadFeatures()
    else if glyphiconRefresh.is(':visible')
      glyphiconRefresh.parents('.clickable').click()
  if KS.login_required && KS.getUrlParam('mobile')
    setTimeout ->
      $.ajax(url: KS.job_notification_path, dataType: 'script')
    , 2000
  setTimeout(KS.autoRefresh, KS.autoRefreshTime)

KS.getUrlParam = (name) ->
  results = new RegExp('[\?&amp;]' + name + '=([^&amp;#]*)').exec(window.location.href)
  return null unless results
  results[1] || 0

KS.getMapPanelParams = () ->
  filter = []
  if $('.show-feature[data-key=status]').length > 0
    filter.push('status[]=')
  if $('.show-feature[data-key=typ]').length > 0
    filter.push('typ[]=')

  $('.show-feature').each () ->
    if $(@).is(':checked')
      filter.push($(@).data('key')+'[]='+$(@).attr('id'))
  $('.map-parameter').each () ->
    filter.push($(@).data('key')+'='+$(@).val())
  filter.join('&')

KS.buildError = (errors) ->
  ul = document.createElement('ul')
  errors.forEach (err) ->
    li = document.createElement('li')
    li.innerHTML = err
    ul.appendChild(li)
  alert = document.createElement('div')
  alert.className = 'alert alert-danger'
  alert_header = document.createElement('strong')
  alert_header.innerHTML = "<%= I18n.t('requests.desktop.new.error', count: 1) %>"
  alert.appendChild(alert_header)
  alert.appendChild(ul)
  col = document.createElement('div')
  col.className = 'col-md-12'
  col.appendChild(alert)
  row = document.createElement('div')
  row.className = 'row'
  row.appendChild(col)
  error_div = document.createElement('div')
  error_div.className = 'errors'
  error_div.appendChild(row)
  $('.errors').replaceWith(error_div.outerHTML)
  
$ ->
  setTimeout(KS.autoRefresh, KS.autoRefreshTime)
  if KS.login_required
    KS.NotificationHandler().initialize()

  $(document).on 'click', '.switch-map-view', () ->
    $(@).html($(@).data($(@).attr('id')))
    $(@).attr('id', if ($(@).attr('id') == 'aerial') then 'map' else 'aerial')
    KS.layers.layers[0].setVisible(!KS.layers.layers[0].getVisible())
    KS.layers.layers[1].setVisible(!KS.layers.layers[1].getVisible())
    false

  $(document).on 'click', '.show-feature', () ->
    KS.reloadFeatures()
  $(document).on 'change', '.map-parameter-reload', () ->
    KS.reloadFeatures()

  $(document).on 'click', '.header-tab', () ->
    $('.sidebar-toggler').trigger('click') unless $('.sidebar').is(':visible')
    unless $('.' + $(@).data('tab') + '-container').length > 0
      $.get($(@).data('url'), null, null, 'script')
  
  $(document).on 'turbolinks:load', () ->
    $('#textsizer a').textresizer({ target: '#main-content' })

  $(document).on 'click', '.check-all', () ->
    checked = $(@).is(':checked')
    $('.' + $(@).data('type')).each () ->
      $(@).prop('checked', checked)

  $(document).on 'click', '.sidebar-toggler', () ->
    width = $('.sidebar').width()
    zoom = $('.ol-zoom')
    scale = $('.ol-scale-line')
    geoloc = $('.geolocation')
    addr_search = $('.address-search-field')
    $('.sidebar').toggle()
    if $('.sidebar').is(':visible')
      $(@).addClass('open')
      $(@).css left: $(@).offset().left + width
      zoom.css left: zoom.offset().left + width
      scale.css left: scale.offset().left + width
      geoloc.css left: geoloc.offset().left + width
      addr_search.css left: addr_search.offset().left + width
    else
      $(@).removeClass('open')
      $(@).css left: $(@).offset().left - width
      zoom.css left: zoom.offset().left - width
      scale.css left: scale.offset().left - width
      geoloc.css left: geoloc.offset().left - width
      addr_search.css left: addr_search.offset().left - width

  $(document).on 'click', '.header-tab', () ->
    $.get("#{ $(@).data('url') }?back=true", null, null, 'script')
    false

  $(document).on 'click', '#btn-start, .btn-start', () ->
    $('#requests.header-tab').trigger('click')
    false

  $(document).on 'click', '.btn-continue', () ->
    error = []
    switch $(@).data('current')
      when 1
        features = KS.layers.findById('new_feature').getSource().getFeatures()
        coord = features[0].getGeometry().clone().transform(KS.projection(), KS.projectionWGS84).getCoordinates()
        $.ajax(
          async: false
          url: $(@).data('url')
          data:
            position: coord
          dataType: 'json').done (response) ->
            if response.status == 200
              KS.olMap.removeInteraction KS.newFeatureInteraction
              KS.stopAnimationTimeout()
              KS.layers.findById('new_feature').getSource().getFeatures()[0].set('animate', false)
              $('#request_long').val(coord[0])
              $('#request_lat').val(coord[1])
            else
              error.push response.error
      when 2
        unless $('.radio-type').is(':checked')
          error.push "<%= I18n.t('requests.desktop.new.error.required.type') %>"
      when 3
        unless $('#request_service_code_1').val()
          error.push "<%= I18n.t('requests.desktop.new.error.required.category') %>"
        unless $('#request_description').val().trim() != ''
          error.push "<%= I18n.t('requests.desktop.new.error.required.description') %>"
      else

    if $(@).data('next') == 1
        layer = KS.layers.findById('new_feature')
        KS.addNewFeatureInteraction(layer, layer.getSource().getFeatures()[0])
    if error.length == 0 || $(@).hasClass('back')
        $('.errors').replaceWith('<div class="errors"></div>')
        $('#form-page-' + $(@).data('current')).toggle()
        $('#form-page-' + $(@).data('next')).toggle()
        return false
    if KS.getUrlParam('mobile')
      $.unique(error)
      content = '<div class="modal-header text-warning"><span class="glyphicon glyphicon-alert"></span>'
      content += $('#new-request').data('validation-error-headline') + '</div>'
      content += '<div class="modal-body">' + error + '</div>'
      content += '<div class="modal-footer"><button type="button" class="btn'
      content += ' btn-primary" data-dismiss="modal">Ok</button></div>'
      KS.flash.show(content)
    else
      KS.buildError(error)
    false

  $('.start-panel').find('.btn-primary').toArray()[0].focus() if $('.start-panel').is(':visible')

  $(document).on 'click', '.update-position', () ->
    navigator.geolocation.getCurrentPosition (position) ->
      $('#request_lat').val(position.coords.latitude)
      $('#request_long').val(position.coords.longitude)
    false


KS.reloadFeatures= () ->
  extent = KS.olMap.getView().calculateExtent(KS.olMap.getSize())
  KS.layers.findById('features').getSource().getSource().clear(true)
  if KS.login_required && KS.getUrlParam('mobile')
    KS.layers.findById('jobs').getSource().getSource().clear(true)
  extent = KS.olHeatmap.getView().calculateExtent(KS.olHeatmap.getSize())
  KS.HeatmapLayers.findById('heatmap').getSource().clear(true)
